// Code generated by xgen. DO NOT EDIT.

package iof_v3

import (
	"time"
)

// BaseMessageElement is The base message element that all message elements extend.
type BaseMessageElement struct {
	IofVersionAttr string `xml:"iofVersion,attr"`
	CreateTimeAttr string `xml:"createTime,attr,omitempty"`
	CreatorAttr    string `xml:"creator,attr,omitempty"`
}

// CompetitorList ...
type CompetitorList struct {
	Competitor []*Competitor `xml:"Competitor"`
	Extensions *Extensions   `xml:"Extensions"`
	*BaseMessageElement
}

// OrganisationList ...
type OrganisationList struct {
	Organisation []*Organisation `xml:"Organisation"`
	Extensions   *Extensions     `xml:"Extensions"`
	*BaseMessageElement
}

// EventList ...
type EventList struct {
	Event      []*Event    `xml:"Event"`
	Extensions *Extensions `xml:"Extensions"`
	*BaseMessageElement
}

// ClassList ...
type ClassList struct {
	Class      []*Class    `xml:"Class"`
	Extensions *Extensions `xml:"Extensions"`
	*BaseMessageElement
}

// EntryList ...
type EntryList struct {
	Event       *Event         `xml:"Event"`
	TeamEntry   []*TeamEntry   `xml:"TeamEntry"`
	PersonEntry []*PersonEntry `xml:"PersonEntry"`
	Extensions  *Extensions    `xml:"Extensions"`
	*BaseMessageElement
}

// CourseData ...
type CourseData struct {
	Event          *Event            `xml:"Event"`
	RaceCourseData []*RaceCourseData `xml:"RaceCourseData"`
	Extensions     *Extensions       `xml:"Extensions"`
	*BaseMessageElement
}

// StartList ...
type StartList struct {
	Event      *Event        `xml:"Event"`
	ClassStart []*ClassStart `xml:"ClassStart"`
	Extensions *Extensions   `xml:"Extensions"`
	*BaseMessageElement
}

// ResultList ...
type ResultList struct {
	StatusAttr  string         `xml:"status,attr,omitempty"`
	Event       *Event         `xml:"Event"`
	ClassResult []*ClassResult `xml:"ClassResult"`
	ResultList  string         `xml:"ResultList"`
	*BaseMessageElement
}

// ServiceRequestList ...
type ServiceRequestList struct {
	Event                      *Event                        `xml:"Event"`
	OrganisationServiceRequest []*OrganisationServiceRequest `xml:"OrganisationServiceRequest"`
	PersonServiceRequest       []*PersonServiceRequest       `xml:"PersonServiceRequest"`
	Extensions                 *Extensions                   `xml:"Extensions"`
	*BaseMessageElement
}

// ControlCardList ...
type ControlCardList struct {
	Owner       string         `xml:"Owner"`
	ControlCard []*ControlCard `xml:"ControlCard"`
	Extensions  *Extensions    `xml:"Extensions"`
	*BaseMessageElement
}

// Id is Identifier element, used extensively. The id should be known and common for both systems taking part in the data exchange.
type Id struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	Value    string `xml:",chardata"`
}

// Person is Container element for custom elements from other schemas.
type Person struct {
	SexAttr        string      `xml:"sex,attr,omitempty"`
	ModifyTimeAttr string      `xml:"modifyTime,attr,omitempty"`
	Id             []*Id       `xml:"Id"`
	Name           *PersonName `xml:"Name"`
	BirthDate      string      `xml:"BirthDate"`
	Nationality    *Country    `xml:"Nationality"`
	Address        []*Address  `xml:"Address"`
	Contact        []*Contact  `xml:"Contact"`
	Extensions     *Extensions `xml:"Extensions"`
}

// PersonName ...
type PersonName struct {
	Family string `xml:"Family"`
	Given  string `xml:"Given"`
}

// Competitor is Container element for custom elements from other schemas.
type Competitor struct {
	ModifyTimeAttr string          `xml:"modifyTime,attr,omitempty"`
	Person         *Person         `xml:"Person"`
	Organisation   []*Organisation `xml:"Organisation"`
	ControlCard    []*ControlCard  `xml:"ControlCard"`
	Class          []*Class        `xml:"Class"`
	Score          []*Score        `xml:"Score"`
	Extensions     *Extensions     `xml:"Extensions"`
}

// ControlCard is The unique identifier of the control card, i.e. card number.
type ControlCard struct {
	PunchingSystemAttr string `xml:"punchingSystem,attr,omitempty"`
	ModifyTimeAttr     string `xml:"modifyTime,attr,omitempty"`
	Value              string `xml:",chardata"`
}

// Score is The score earned in an event for some purpose, e.g. a ranking list. The 'type' attribute is used to specify which purpose.
type Score struct {
	TypeAttr string  `xml:"type,attr,omitempty"`
	Value    float64 `xml:",chardata"`
}

// Organisation is Container element for custom elements from other schemas.
type Organisation struct {
	TypeAttr             string       `xml:"type,attr,omitempty"`
	ModifyTimeAttr       string       `xml:"modifyTime,attr,omitempty"`
	Id                   *Id          `xml:"Id"`
	Name                 string       `xml:"Name"`
	ShortName            string       `xml:"ShortName"`
	MediaName            string       `xml:"MediaName"`
	ParentOrganisationId int          `xml:"ParentOrganisationId"`
	Country              *Country     `xml:"Country"`
	Address              []*Address   `xml:"Address"`
	Contact              []*Contact   `xml:"Contact"`
	Position             *GeoPosition `xml:"Position"`
	Account              []*Account   `xml:"Account"`
	Role                 []*Role      `xml:"Role"`
	Logotype             []*Image     `xml:"Logotype"`
	Extensions           *Extensions  `xml:"Extensions"`
}

// Role is A role defines a connection between a person and some kind of task, responsibility or engagement, e.g. being a course setter at an event.
type Role struct {
	TypeAttr string  `xml:"type,attr"`
	Person   *Person `xml:"Person"`
}

// Event is Container element for custom elements from other schemas.
type Event struct {
	ModifyTimeAttr string               `xml:"modifyTime,attr,omitempty"`
	Id             *Id                  `xml:"Id"`
	Name           string               `xml:"Name"`
	StartTime      *DateAndOptionalTime `xml:"StartTime"`
	EndTime        *DateAndOptionalTime `xml:"EndTime"`
	Status         string               `xml:"Status"`
	Classification string               `xml:"Classification"`
	Form           []string             `xml:"Form"`
	Organiser      []*Organisation      `xml:"Organiser"`
	Official       []*Role              `xml:"Official"`
	Class          []*Class             `xml:"Class"`
	Race           []*Race              `xml:"Race"`
	EntryReceiver  *EntryReceiver       `xml:"EntryReceiver"`
	Service        []*Service           `xml:"Service"`
	Account        []*Account           `xml:"Account"`
	URL            []*EventURL          `xml:"URL"`
	Information    []*InformationItem   `xml:"Information"`
	Schedule       []*Schedule          `xml:"Schedule"`
	News           []*InformationItem   `xml:"News"`
	Extensions     *Extensions          `xml:"Extensions"`
}

// EntryReceiver ...
type EntryReceiver struct {
	Address []*Address `xml:"Address"`
	Contact []*Contact `xml:"Contact"`
}

// EventForm ...
type EventForm string

// EventStatus is The date of the event or race has changed. A new Event or Race element should be created in addition to the already existing element.
type EventStatus string

// Race is Container element for custom elements from other schemas.
type Race struct {
	ModifyTimeAttr string               `xml:"modifyTime,attr,omitempty"`
	RaceNumber     int                  `xml:"RaceNumber"`
	Name           string               `xml:"Name"`
	StartTime      *DateAndOptionalTime `xml:"StartTime"`
	EndTime        *DateAndOptionalTime `xml:"EndTime"`
	Status         string               `xml:"Status"`
	Classification string               `xml:"Classification"`
	Position       *GeoPosition         `xml:"Position"`
	Discipline     []string             `xml:"Discipline"`
	Organiser      []*Organisation      `xml:"Organiser"`
	Official       []*Role              `xml:"Official"`
	Service        []*Service           `xml:"Service"`
	URL            []*EventURL          `xml:"URL"`
	Extensions     *Extensions          `xml:"Extensions"`
}

// EventClassification ...
type EventClassification string

// RaceDiscipline ...
type RaceDiscipline string

// EventURL ...
type EventURL struct {
	TypeAttr string `xml:"type,attr"`
	Value    string `xml:",chardata"`
}

// Schedule is Any extra information about the sub-event.
type Schedule struct {
	ModifyTimeAttr string       `xml:"modifyTime,attr,omitempty"`
	StartTime      string       `xml:"StartTime"`
	EndTime        string       `xml:"EndTime"`
	Name           string       `xml:"Name"`
	Venue          string       `xml:"Venue"`
	Position       *GeoPosition `xml:"Position"`
	Details        string       `xml:"Details"`
}

// InformationItem is The information in detailed form.
type InformationItem struct {
	ModifyTimeAttr string `xml:"modifyTime,attr,omitempty"`
	Title          string `xml:"Title"`
	Content        string `xml:"Content"`
}

// Class is Container element for custom elements from other schemas.
type Class struct {
	MinAgeAttr                    int          `xml:"minAge,attr,omitempty"`
	MaxAgeAttr                    int          `xml:"maxAge,attr,omitempty"`
	SexAttr                       string       `xml:"sex,attr,omitempty"`
	MinNumberOfTeamMembersAttr    int          `xml:"minNumberOfTeamMembers,attr,omitempty"`
	MaxNumberOfTeamMembersAttr    int          `xml:"maxNumberOfTeamMembers,attr,omitempty"`
	MinTeamAgeAttr                int          `xml:"minTeamAge,attr,omitempty"`
	MaxTeamAgeAttr                int          `xml:"maxTeamAge,attr,omitempty"`
	NumberOfCompetitorsAttr       int          `xml:"numberOfCompetitors,attr,omitempty"`
	MaxNumberOfCompetitorsAttr    int          `xml:"maxNumberOfCompetitors,attr,omitempty"`
	ResultListModeAttr            string       `xml:"resultListMode,attr,omitempty"`
	ModifyTimeAttr                string       `xml:"modifyTime,attr,omitempty"`
	Id                            *Id          `xml:"Id"`
	Name                          string       `xml:"Name"`
	ShortName                     string       `xml:"ShortName"`
	ClassType                     []*ClassType `xml:"ClassType"`
	Leg                           []*Leg       `xml:"Leg"`
	TeamFee                       []*Fee       `xml:"TeamFee"`
	Fee                           []*Fee       `xml:"Fee"`
	Status                        string       `xml:"Status"`
	RaceClass                     []*RaceClass `xml:"RaceClass"`
	TooFewEntriesSubstituteClass  *Class       `xml:"TooFewEntriesSubstituteClass"`
	TooManyEntriesSubstituteClass *Class       `xml:"TooManyEntriesSubstituteClass"`
	Extensions                    *Extensions  `xml:"Extensions"`
}

// ClassType is The name of the class type.
type ClassType struct {
	ModifyTimeAttr string `xml:"modifyTime,attr,omitempty"`
	Id             *Id    `xml:"Id"`
	Name           string `xml:"Name"`
}

// EventClassStatus is The results are considered invalid due to technical issues such as misplaced controls. Entry fees are refunded.
type EventClassStatus string

// RaceClassStatus is The results are considered invalid due to technical issues such as misplaced controls. Entry fees are refunded.
type RaceClassStatus string

// RaceClass is Container element for custom elements from other schemas.
type RaceClass struct {
	RaceNumberAttr             int             `xml:"raceNumber,attr,omitempty"`
	MaxNumberOfCompetitorsAttr int             `xml:"maxNumberOfCompetitors,attr,omitempty"`
	ModifyTimeAttr             string          `xml:"modifyTime,attr,omitempty"`
	PunchingSystem             []string        `xml:"PunchingSystem"`
	TeamFee                    []*Fee          `xml:"TeamFee"`
	Fee                        []*Fee          `xml:"Fee"`
	FirstStart                 string          `xml:"FirstStart"`
	Status                     string          `xml:"Status"`
	Course                     []*SimpleCourse `xml:"Course"`
	OnlineControl              []*Control      `xml:"OnlineControl"`
	Extensions                 *Extensions     `xml:"Extensions"`
}

// Fee is Container element for custom elements from other schemas.
type Fee struct {
	TypeAttr          string            `xml:"type,attr,omitempty"`
	ModifyTimeAttr    string            `xml:"modifyTime,attr,omitempty"`
	Id                *Id               `xml:"Id"`
	Name              []*LanguageString `xml:"Name"`
	Amount            *Amount           `xml:"Amount"`
	TaxableAmount     *Amount           `xml:"TaxableAmount"`
	Percentage        float64           `xml:"Percentage"`
	TaxablePercentage float64           `xml:"TaxablePercentage"`
	ValidFromTime     string            `xml:"ValidFromTime"`
	ValidToTime       string            `xml:"ValidToTime"`
	FromDateOfBirth   string            `xml:"FromDateOfBirth"`
	ToDateOfBirth     string            `xml:"ToDateOfBirth"`
	Extensions        *Extensions       `xml:"Extensions"`
}

// AssignedFee is Container element for custom elements from other schemas.
type AssignedFee struct {
	ModifyTimeAttr string      `xml:"modifyTime,attr,omitempty"`
	Fee            *Fee        `xml:"Fee"`
	PaidAmount     *Amount     `xml:"PaidAmount"`
	Extensions     *Extensions `xml:"Extensions"`
}

// Amount is Defines a monetary amount.
type Amount struct {
	CurrencyAttr string  `xml:"currency,attr,omitempty"`
	Value        float64 `xml:",chardata"`
}

// PersonEntry is Container element for custom elements from other schemas.
type PersonEntry struct {
	ModifyTimeAttr             string                      `xml:"modifyTime,attr,omitempty"`
	Id                         *Id                         `xml:"Id"`
	Person                     *Person                     `xml:"Person"`
	Organisation               *Organisation               `xml:"Organisation"`
	ControlCard                []*ControlCard              `xml:"ControlCard"`
	Score                      []*Score                    `xml:"Score"`
	Class                      []*Class                    `xml:"Class"`
	RaceNumber                 []int                       `xml:"RaceNumber"`
	AssignedFee                []*AssignedFee              `xml:"AssignedFee"`
	ServiceRequest             []*ServiceRequest           `xml:"ServiceRequest"`
	StartTimeAllocationRequest *StartTimeAllocationRequest `xml:"StartTimeAllocationRequest"`
	EntryTime                  string                      `xml:"EntryTime"`
	Extensions                 *Extensions                 `xml:"Extensions"`
}

// TeamEntry is Container element for custom elements from other schemas.
type TeamEntry struct {
	ModifyTimeAttr             string                      `xml:"modifyTime,attr,omitempty"`
	Id                         *Id                         `xml:"Id"`
	Name                       string                      `xml:"Name"`
	Organisation               []*Organisation             `xml:"Organisation"`
	TeamEntryPerson            []*TeamEntryPerson          `xml:"TeamEntryPerson"`
	Class                      []*Class                    `xml:"Class"`
	Race                       []int                       `xml:"Race"`
	AssignedFee                []*AssignedFee              `xml:"AssignedFee"`
	ServiceRequest             []*ServiceRequest           `xml:"ServiceRequest"`
	StartTimeAllocationRequest *StartTimeAllocationRequest `xml:"StartTimeAllocationRequest"`
	ContactInformation         string                      `xml:"ContactInformation"`
	EntryTime                  string                      `xml:"EntryTime"`
	Extensions                 *Extensions                 `xml:"Extensions"`
}

// TeamEntryPerson is Container element for custom elements from other schemas.
type TeamEntryPerson struct {
	Person       *Person        `xml:"Person"`
	Organisation *Organisation  `xml:"Organisation"`
	Leg          int            `xml:"Leg"`
	LegOrder     int            `xml:"LegOrder"`
	ControlCard  []*ControlCard `xml:"ControlCard"`
	Score        []*Score       `xml:"Score"`
	AssignedFee  []*AssignedFee `xml:"AssignedFee"`
	Extensions   *Extensions    `xml:"Extensions"`
}

// StartTimeAllocationRequest is The reference person for the start time allocation request.
type StartTimeAllocationRequest struct {
	TypeAttr     string        `xml:"type,attr,omitempty"`
	Organisation *Organisation `xml:"Organisation"`
	Person       *Person       `xml:"Person"`
}

// ClassStart is Container element for custom elements from other schemas.
type ClassStart struct {
	TimeResolutionAttr float64             `xml:"timeResolution,attr,omitempty"`
	ModifyTimeAttr     string              `xml:"modifyTime,attr,omitempty"`
	Class              *Class              `xml:"Class"`
	Course             []*SimpleRaceCourse `xml:"Course"`
	StartName          []*StartName        `xml:"StartName"`
	PersonStart        []*PersonStart      `xml:"PersonStart"`
	TeamStart          []*TeamStart        `xml:"TeamStart"`
	Extensions         *Extensions         `xml:"Extensions"`
}

// StartName is Defines the name of the start place (e.g. Start 1), if the race has multiple start places.
type StartName struct {
	RaceNumberAttr int    `xml:"raceNumber,attr,omitempty"`
	Value          string `xml:",chardata"`
}

// PersonStart is Container element for custom elements from other schemas.
type PersonStart struct {
	ModifyTimeAttr string             `xml:"modifyTime,attr,omitempty"`
	EntryId        *Id                `xml:"EntryId"`
	Person         *Person            `xml:"Person"`
	Organisation   *Organisation      `xml:"Organisation"`
	Start          []*PersonRaceStart `xml:"Start"`
	Extensions     *Extensions        `xml:"Extensions"`
}

// PersonRaceStart is Container element for custom elements from other schemas.
type PersonRaceStart struct {
	RaceNumberAttr int               `xml:"raceNumber,attr,omitempty"`
	BibNumber      string            `xml:"BibNumber"`
	StartTime      string            `xml:"StartTime"`
	Course         *SimpleCourse     `xml:"Course"`
	ControlCard    []*ControlCard    `xml:"ControlCard"`
	AssignedFee    []*AssignedFee    `xml:"AssignedFee"`
	ServiceRequest []*ServiceRequest `xml:"ServiceRequest"`
	Extensions     *Extensions       `xml:"Extensions"`
}

// TeamStart is Container element for custom elements from other schemas.
type TeamStart struct {
	ModifyTimeAttr  string             `xml:"modifyTime,attr,omitempty"`
	EntryId         *Id                `xml:"EntryId"`
	Name            string             `xml:"Name"`
	Organisation    []*Organisation    `xml:"Organisation"`
	BibNumber       string             `xml:"BibNumber"`
	TeamMemberStart []*TeamMemberStart `xml:"TeamMemberStart"`
	AssignedFee     []*AssignedFee     `xml:"AssignedFee"`
	ServiceRequest  []*ServiceRequest  `xml:"ServiceRequest"`
	Extensions      *Extensions        `xml:"Extensions"`
}

// TeamMemberStart is Container element for custom elements from other schemas.
type TeamMemberStart struct {
	ModifyTimeAttr string                 `xml:"modifyTime,attr,omitempty"`
	EntryId        *Id                    `xml:"EntryId"`
	Person         *Person                `xml:"Person"`
	Organisation   *Organisation          `xml:"Organisation"`
	Start          []*TeamMemberRaceStart `xml:"Start"`
	Extensions     *Extensions            `xml:"Extensions"`
}

// TeamMemberRaceStart is Container element for custom elements from other schemas.
type TeamMemberRaceStart struct {
	RaceNumberAttr int               `xml:"raceNumber,attr,omitempty"`
	Leg            int               `xml:"Leg"`
	LegOrder       int               `xml:"LegOrder"`
	BibNumber      string            `xml:"BibNumber"`
	StartTime      string            `xml:"StartTime"`
	Course         *SimpleCourse     `xml:"Course"`
	ControlCard    []*ControlCard    `xml:"ControlCard"`
	AssignedFee    []*AssignedFee    `xml:"AssignedFee"`
	ServiceRequest []*ServiceRequest `xml:"ServiceRequest"`
	Extensions     *Extensions       `xml:"Extensions"`
}

// ClassResult is Container element for custom elements from other schemas.
type ClassResult struct {
	TimeResolutionAttr float64             `xml:"timeResolution,attr,omitempty"`
	ModifyTimeAttr     string              `xml:"modifyTime,attr,omitempty"`
	Class              *Class              `xml:"Class"`
	Course             []*SimpleRaceCourse `xml:"Course"`
	PersonResult       []*PersonResult     `xml:"PersonResult"`
	TeamResult         []*TeamResult       `xml:"TeamResult"`
	Extensions         *Extensions         `xml:"Extensions"`
}

// PersonResult is Container element for custom elements from other schemas.
type PersonResult struct {
	ModifyTimeAttr string              `xml:"modifyTime,attr,omitempty"`
	EntryId        *Id                 `xml:"EntryId"`
	Person         *Person             `xml:"Person"`
	Organisation   *Organisation       `xml:"Organisation"`
	Result         []*PersonRaceResult `xml:"Result"`
	Extensions     *Extensions         `xml:"Extensions"`
}

// PersonRaceResult is Container element for custom elements from other schemas.
type PersonRaceResult struct {
	RaceNumberAttr int               `xml:"raceNumber,attr,omitempty"`
	BibNumber      string            `xml:"BibNumber"`
	StartTime      string            `xml:"StartTime"`
	FinishTime     string            `xml:"FinishTime"`
	Time           float64           `xml:"Time"`
	TimeBehind     float64           `xml:"TimeBehind"`
	Position       int               `xml:"Position"`
	Status         string            `xml:"Status"`
	Score          []*Score          `xml:"Score"`
	OverallResult  *OverallResult    `xml:"OverallResult"`
	Course         *SimpleCourse     `xml:"Course"`
	SplitTime      []*SplitTime      `xml:"SplitTime"`
	ControlAnswer  []*ControlAnswer  `xml:"ControlAnswer"`
	Route          *Route            `xml:"Route"`
	ControlCard    []*ControlCard    `xml:"ControlCard"`
	AssignedFee    []*AssignedFee    `xml:"AssignedFee"`
	ServiceRequest []*ServiceRequest `xml:"ServiceRequest"`
	Extensions     *Extensions       `xml:"Extensions"`
}

// TeamResult is Container element for custom elements from other schemas.
type TeamResult struct {
	EntryId          *Id                 `xml:"EntryId"`
	Name             string              `xml:"Name"`
	Organisation     []*Organisation     `xml:"Organisation"`
	BibNumber        string              `xml:"BibNumber"`
	TeamMemberResult []*TeamMemberResult `xml:"TeamMemberResult"`
	AssignedFee      []*AssignedFee      `xml:"AssignedFee"`
	ServiceRequest   []*ServiceRequest   `xml:"ServiceRequest"`
	Extensions       *Extensions         `xml:"Extensions"`
}

// TeamMemberResult is Container element for custom elements from other schemas.
type TeamMemberResult struct {
	ModifyTimeAttr string                  `xml:"modifyTime,attr,omitempty"`
	EntryId        *Id                     `xml:"EntryId"`
	Person         *Person                 `xml:"Person"`
	Organisation   *Organisation           `xml:"Organisation"`
	Result         []*TeamMemberRaceResult `xml:"Result"`
	Extensions     *Extensions             `xml:"Extensions"`
}

// TimeBehind ...
type TimeBehind struct {
	TypeAttr string  `xml:"type,attr"`
	Value    float64 `xml:",chardata"`
}

// Position ...
type Position struct {
	TypeAttr string `xml:"type,attr"`
	Value    int    `xml:",chardata"`
}

// TeamMemberRaceResult is The time, in seconds, that is shown in the result list. Fractions of seconds (e.g. 258.7) may be used if the time resolution is higher than one second.
type TeamMemberRaceResult struct {
	RaceNumberAttr int               `xml:"raceNumber,attr,omitempty"`
	Leg            int               `xml:"Leg"`
	LegOrder       int               `xml:"LegOrder"`
	BibNumber      string            `xml:"BibNumber"`
	StartTime      string            `xml:"StartTime"`
	FinishTime     string            `xml:"FinishTime"`
	Time           float64           `xml:"Time"`
	TimeBehind     []*TimeBehind     `xml:"TimeBehind"`
	Position       []*Position       `xml:"Position"`
	Status         string            `xml:"Status"`
	Score          []*Score          `xml:"Score"`
	OverallResult  *OverallResult    `xml:"OverallResult"`
	Course         *SimpleCourse     `xml:"Course"`
	SplitTime      []*SplitTime      `xml:"SplitTime"`
	ControlAnswer  []*ControlAnswer  `xml:"ControlAnswer"`
	Route          *Route            `xml:"Route"`
	ControlCard    []*ControlCard    `xml:"ControlCard"`
	AssignedFee    []*AssignedFee    `xml:"AssignedFee"`
	ServiceRequest []*ServiceRequest `xml:"ServiceRequest"`
	Extensions     *Extensions       `xml:"Extensions"`
}

// OverallResult is Container element for custom elements from other schemas.
type OverallResult struct {
	Time       float64     `xml:"Time"`
	TimeBehind float64     `xml:"TimeBehind"`
	Position   int         `xml:"Position"`
	Status     string      `xml:"Status"`
	Score      []*Score    `xml:"Score"`
	Extensions *Extensions `xml:"Extensions"`
}

// ResultStatus is The competitor has cancelled his/hers entry.
type ResultStatus string

// ControlAnswer is Container element for custom elements from other schemas.
type ControlAnswer struct {
	Answer        string      `xml:"Answer"`
	CorrectAnswer string      `xml:"CorrectAnswer"`
	Time          float64     `xml:"Time"`
	Extensions    *Extensions `xml:"Extensions"`
}

// SplitTime is Container element for custom elements from other schemas.
type SplitTime struct {
	StatusAttr  string      `xml:"status,attr,omitempty"`
	ControlCode string      `xml:"ControlCode"`
	Time        float64     `xml:"Time"`
	Extensions  *Extensions `xml:"Extensions"`
}

// Route is Defines a route, i.e. a number of geographical positions (waypoints) describing a competitor's navigation throughout a course.
//
//         As routes contain large amounts of information, a compact storage format is utilized to keep the overall file size small. A route is stored as a base64-encoded byte sequence of waypoints. A waypoint is represented as described below. All multi-byte data types are stored in big-endian byte order (most significant byte first). Typically, a one-hour route with one-second waypoint recording interval occupies around 20 kilobytes.
//
//
//         Waypoint header byte
//         ====================
//         Each waypoint byte sequence starts with a waypoint header byte:
//         Waypoint header byte, bit 1: Waypoint type. 0 for normal waypoint, 1 for interruption waypoint. An interruption waypoint is a waypoint that is the last waypoint before an interruption in the route occurs, e.g. due to a satellite signal receiving failure. The last waypoint of a route should be a normal waypoint, not an interruption waypoint.
//         Waypoint header byte, bits 2 and 3: Time storage mode. For a description of the time storage modes, see below.
//         Bit 2   Bit 3   Time storage mode
//         0      0      full storage mode (6 bytes)
//         1      0      milliseconds delta storage mode (2 bytes)
//         0      1      seconds delta storage mode (1 byte)
//         Waypoint header byte, bits 4 and 5: Position storage mode (latitude, longitude, and altitude (if present)). For a description of the position storage modes, see below.
//         Bit 4   Bit 5   Position storage mode
//         0      0      full storage mode (4 + 4 (+ 3) bytes for latitude, longitude and altitude (if present))
//         1      0      big delta delta storage mode (2 + 2 (+ 1) bytes)
//         0      1      small delta storage mode (1 + 1 (+ 1) bytes)
//         Waypoint header byte, bit 6: Altitude presence. 0 if an altitude value is not present, 1 if it is present.
//         Waypoint header byte, bit 7: Unused, always 0.
//         Waypoint header byte, bit 8: Unused, always 0.
//
//
//         Time byte sequence
//         ==================
//         After the waypoint byte comes the time byte sequence. Depending on the time storage mode defined in the waypoint header, the time byte sequence is either 6 bytes (full), 2 bytes (milliseconds delta) or 1 byte (seconds delta) long.
//
//         Full storage mode
//         -----------------
//         The following 6 bytes are an unsigned 48-bit integer defining the waypoint's time as the number of milliseconds (1/1000 seconds) since January 1, 1900, 00:00:00 UTC.
//
//         Milliseconds delta storage mode
//         -------------------------------
//         The following 2 bytes are an unsigned 16-bit integer defining the waypoint's time as the number of milliseconds to add to the last waypoint's time.
//
//         Seconds delta storage mode
//         --------------------------
//         The following byte is an unsigned 8-bit integer defining the waypoint's time as the number of seconds to add to the last waypoint's time. This storage mody can only be used when the difference to the last waypoint's time is an integer value.
//
//         Consequently:
//         - seconds delta storage mode is used when the waypoint's time is less than 256 seconds later than the last waypoint's time, and the difference between the times is an integer value.
//         - milliseconds delta storage mode is used when the waypoint's time is less than 65.536 seconds later than the last waypoint's time
//         - otherwise, full storage mode is used
//         The time of the first waypoint of a route is always stored in full storage mode.
//
//
//         Position byte sequence
//         ======================
//         Next, the position byte sequence appears: latitude, longitude and (if present) altitude bytes. Depending on the position storage mode defined in the waypoint header, the position byte sequence is either 4 + 4 (+ 3) bytes (full), 2 + 2 (+ 1) bytes (big delta) or 1 + 1 (+ 1) bytes (small delta) long.
//
//         Full storage mode
//         -----------------
//         The first 4 bytes are a signed 32-bit integer defining the waypoint's latitude as microdegrees (1/1000000 degrees) relative to the equator. A negative value implies a latitude south of the equator. A microdegree is approximately equivalent to 0.1 meters.
//         The following 4 bytes are a signed 32-bit integer defining the waypoint's latitude as microdegrees (1/1000000 degrees) relative to the Greenwich meridian. A negative value implies a longitude west of the Greenwich meridian. A microdegree is approximately equivalent to 0.1 meters at the equator and infinitely small at the poles.
//         If the altitude presence bit in the waypoint header bit is set to 1, the following 3 bytes are a signed 24-bit integer defining the waypoint's altitude as decimeters (1/10 meters) relative to the sea level.
//
//         Big delta storage mode
//         ----------------------
//         The first 2 bytes are a signed 16-bit integer defining the waypoint's latitude as the number of microdegrees to add to the last waypoint's latitude.
//         The following 2 bytes are a signed 16-bit integer defining the waypoint's longitude as the number of microdegrees to add to the last waypoint's longitude.
//         If the altitude presence bit in the waypoint header bit is set to 1, the following byte is a signed 8-bit integer defining the waypoint's altitude as the number of decimeters to add to the last waypoint's altitude.
//
//         Small delta storage mode
//         ----------------------
//         The first byte is a signed 8-bit integer defining the waypoint's latitude as the number of microdegrees to add to the last waypoint's latitude.
//         The following byte is a signed 8-bit integer defining the waypoint's longitude as the number of microdegrees to add to the last waypoint's longitude.
//         If the altitude presence bit in the waypoint header bit is set to 1, the following byte is a signed 8-bit integer defining the waypoint's altitude as the number of decimeters to add to the last waypoint's altitude.
//
//         Consequently:
//         - small delta storage mode is used when the waypoint's latitude and longitude is within -0.000128 to 0.000127 degrees from the last waypoint's latitude, and when the altitude is not present or is within -12.8 to 12.7 meters from the last waypoint's altitude
//         - big delta storage mode is used when the waypoint's latitude and longitude is within -0.032768 to 0.032767 degrees from the last waypoint's latitude, and when the altitude is not present or is within -12.8 to 12.7 meters from the last waypoint's altitude
//         - otherwise, full storage mode is used
//         The position of the first waypoint of a route is always stored in full storage mode.
//
//         Code libraries for reading and writing route data is found in https://github.com/international-orienteering-federation/datastandard-v3/tree/master/libraries.
type Route struct {
	Value string `xml:",chardata"`
}

// Leg is Container element for custom elements from other schemas.
type Leg struct {
	MinNumberOfCompetitorsAttr int         `xml:"minNumberOfCompetitors,attr,omitempty"`
	MaxNumberOfCompetitorsAttr int         `xml:"maxNumberOfCompetitors,attr,omitempty"`
	Name                       string      `xml:"Name"`
	Extensions                 *Extensions `xml:"Extensions"`
}

// Control is Container element for custom elements from other schemas.
type Control struct {
	TypeAttr       string            `xml:"type,attr,omitempty"`
	ModifyTimeAttr string            `xml:"modifyTime,attr,omitempty"`
	Id             *Id               `xml:"Id"`
	PunchingUnitId []*Id             `xml:"PunchingUnitId"`
	Name           []*LanguageString `xml:"Name"`
	Position       *GeoPosition      `xml:"Position"`
	MapPosition    *MapPosition      `xml:"MapPosition"`
	Extensions     *Extensions       `xml:"Extensions"`
}

// GeoPosition is Defines a geographical position, e.g. of a control.
type GeoPosition struct {
	LngAttr float64 `xml:"lng,attr"`
	LatAttr float64 `xml:"lat,attr"`
	AltAttr float64 `xml:"alt,attr,omitempty"`
}

// Map is Container element for custom elements from other schemas.
type Map struct {
	Id                     *Id          `xml:"Id"`
	Image                  *Image       `xml:"Image"`
	Scale                  float64      `xml:"Scale"`
	MapPositionTopLeft     *MapPosition `xml:"MapPositionTopLeft"`
	MapPositionBottomRight *MapPosition `xml:"MapPositionBottomRight"`
	Extensions             *Extensions  `xml:"Extensions"`
}

// Image is Defines an image file, either as a link (use the url attribute) or as base64-encoded binary data.
type Image struct {
	UrlAttr        string  `xml:"url,attr,omitempty"`
	MediaTypeAttr  string  `xml:"mediaType,attr"`
	WidthAttr      int     `xml:"width,attr,omitempty"`
	HeightAttr     int     `xml:"height,attr,omitempty"`
	ResolutionAttr float64 `xml:"resolution,attr,omitempty"`
	Value          string  `xml:",chardata"`
}

// MapPosition is Defines a position in a map's coordinate system.
type MapPosition struct {
	XAttr    float64 `xml:"x,attr"`
	YAttr    float64 `xml:"y,attr"`
	UnitAttr string  `xml:"unit,attr,omitempty"`
}

// RaceCourseData is Container element for custom elements from other schemas.
type RaceCourseData struct {
	RaceNumberAttr         int                       `xml:"raceNumber,attr,omitempty"`
	Map                    []*Map                    `xml:"Map"`
	Control                []*Control                `xml:"Control"`
	Course                 []*Course                 `xml:"Course"`
	ClassCourseAssignment  []*ClassCourseAssignment  `xml:"ClassCourseAssignment"`
	PersonCourseAssignment []*PersonCourseAssignment `xml:"PersonCourseAssignment"`
	TeamCourseAssignment   []*TeamCourseAssignment   `xml:"TeamCourseAssignment"`
	Extensions             *Extensions               `xml:"Extensions"`
}

// ClassCourseAssignment is Container element for custom elements from other schemas.
type ClassCourseAssignment struct {
	NumberOfCompetitorsAttr int         `xml:"numberOfCompetitors,attr,omitempty"`
	ClassId                 *Id         `xml:"ClassId"`
	ClassName               string      `xml:"ClassName"`
	AllowedOnLeg            []int       `xml:"AllowedOnLeg"`
	CourseName              string      `xml:"CourseName"`
	CourseFamily            string      `xml:"CourseFamily"`
	Extensions              *Extensions `xml:"Extensions"`
}

// PersonCourseAssignment is Container element for custom elements from other schemas.
type PersonCourseAssignment struct {
	EntryId      *Id         `xml:"EntryId"`
	BibNumber    string      `xml:"BibNumber"`
	PersonName   string      `xml:"PersonName"`
	ClassName    string      `xml:"ClassName"`
	CourseName   string      `xml:"CourseName"`
	CourseFamily string      `xml:"CourseFamily"`
	Extensions   *Extensions `xml:"Extensions"`
}

// TeamCourseAssignment is Container element for custom elements from other schemas.
type TeamCourseAssignment struct {
	BibNumber                  string                        `xml:"BibNumber"`
	TeamName                   string                        `xml:"TeamName"`
	ClassName                  string                        `xml:"ClassName"`
	TeamMemberCourseAssignment []*TeamMemberCourseAssignment `xml:"TeamMemberCourseAssignment"`
	Extensions                 *Extensions                   `xml:"Extensions"`
}

// TeamMemberCourseAssignment is Container element for custom elements from other schemas.
type TeamMemberCourseAssignment struct {
	EntryId        *Id         `xml:"EntryId"`
	BibNumber      string      `xml:"BibNumber"`
	Leg            int         `xml:"Leg"`
	LegOrder       int         `xml:"LegOrder"`
	TeamMemberName string      `xml:"TeamMemberName"`
	CourseName     string      `xml:"CourseName"`
	CourseFamily   string      `xml:"CourseFamily"`
	Extensions     *Extensions `xml:"Extensions"`
}

// Course is Container element for custom elements from other schemas.
type Course struct {
	NumberOfCompetitorsAttr int              `xml:"numberOfCompetitors,attr,omitempty"`
	ModifyTimeAttr          string           `xml:"modifyTime,attr,omitempty"`
	Id                      *Id              `xml:"Id"`
	Name                    string           `xml:"Name"`
	CourseFamily            string           `xml:"CourseFamily"`
	Length                  float64          `xml:"Length"`
	Climb                   float64          `xml:"Climb"`
	CourseControl           []*CourseControl `xml:"CourseControl"`
	MapId                   int              `xml:"MapId"`
	Extensions              *Extensions      `xml:"Extensions"`
}

// SimpleCourse is The number of controls in the course, excluding start and finish.
type SimpleCourse struct {
	Id               *Id     `xml:"Id"`
	Name             string  `xml:"Name"`
	CourseFamily     string  `xml:"CourseFamily"`
	Length           float64 `xml:"Length"`
	Climb            float64 `xml:"Climb"`
	NumberOfControls int     `xml:"NumberOfControls"`
}

// SimpleRaceCourse is Defines a course for a certain race, excluding controls.
type SimpleRaceCourse struct {
	RaceNumberAttr int `xml:"raceNumber,attr,omitempty"`
	*SimpleCourse
}

// CourseControl is Container element for custom elements from other schemas.
type CourseControl struct {
	TypeAttr               string       `xml:"type,attr,omitempty"`
	RandomOrderAttr        bool         `xml:"randomOrder,attr,omitempty"`
	SpecialInstructionAttr string       `xml:"specialInstruction,attr,omitempty"`
	TapedRouteLengthAttr   float64      `xml:"tapedRouteLength,attr,omitempty"`
	ModifyTimeAttr         string       `xml:"modifyTime,attr,omitempty"`
	Control                []string     `xml:"Control"`
	MapText                string       `xml:"MapText"`
	MapTextPosition        *MapPosition `xml:"MapTextPosition"`
	LegLength              float64      `xml:"LegLength"`
	Score                  float64      `xml:"Score"`
	Extensions             *Extensions  `xml:"Extensions"`
}

// ControlType is The type of a control: (ordinary) control, start, finish, crossing point or end of marked route.
type ControlType string

// Service is Container element for custom elements from other schemas.
type Service struct {
	TypeAttr        string            `xml:"type,attr,omitempty"`
	ModifyTimeAttr  string            `xml:"modifyTime,attr,omitempty"`
	Id              *Id               `xml:"Id"`
	Name            []*LanguageString `xml:"Name"`
	Fee             []*Fee            `xml:"Fee"`
	Description     []*LanguageString `xml:"Description"`
	MaxNumber       float64           `xml:"MaxNumber"`
	RequestedNumber float64           `xml:"RequestedNumber"`
	Extensions      *Extensions       `xml:"Extensions"`
}

// OrganisationServiceRequest is The service requests made by persons representing the organisation.
type OrganisationServiceRequest struct {
	Organisation         *Organisation           `xml:"Organisation"`
	ServiceRequest       []*ServiceRequest       `xml:"ServiceRequest"`
	PersonServiceRequest []*PersonServiceRequest `xml:"PersonServiceRequest"`
}

// PersonServiceRequest is The service requests.
type PersonServiceRequest struct {
	Person         *Person           `xml:"Person"`
	ServiceRequest []*ServiceRequest `xml:"ServiceRequest"`
}

// ServiceRequest is Container element for custom elements from other schemas.
type ServiceRequest struct {
	ModifyTimeAttr    string         `xml:"modifyTime,attr,omitempty"`
	Id                *Id            `xml:"Id"`
	Service           *Service       `xml:"Service"`
	RequestedQuantity float64        `xml:"RequestedQuantity"`
	DeliveredQuantity float64        `xml:"DeliveredQuantity"`
	Comment           string         `xml:"Comment"`
	AssignedFee       []*AssignedFee `xml:"AssignedFee"`
	Extensions        *Extensions    `xml:"Extensions"`
}

// Account is The bank account of an organisation or an event.
type Account struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	Value    string `xml:",chardata"`
}

// Address is The postal address of a person or organisation.
type Address struct {
	TypeAttr       string   `xml:"type,attr,omitempty"`
	ModifyTimeAttr string   `xml:"modifyTime,attr,omitempty"`
	CareOf         string   `xml:"CareOf"`
	Street         string   `xml:"Street"`
	ZipCode        string   `xml:"ZipCode"`
	City           string   `xml:"City"`
	State          string   `xml:"State"`
	Country        *Country `xml:"Country"`
}

// Country is Defines the name of the country.
type Country struct {
	CodeAttr string `xml:"code,attr"`
	Value    string `xml:",chardata"`
}

// Contact is Contact information for a person, organisation or other entity.
type Contact struct {
	TypeAttr       string `xml:"type,attr"`
	ModifyTimeAttr string `xml:"modifyTime,attr,omitempty"`
	Value          string `xml:",chardata"`
}

// DateAndOptionalTime is The time part, expressed in ISO 8601 format.
type DateAndOptionalTime struct {
	Date string    `xml:"Date"`
	Time time.Time `xml:"Time"`
}

// LanguageString is Defines a text that is given in a particular language.
type LanguageString struct {
	LanguageAttr string `xml:"language,attr,omitempty"`
	Value        string `xml:",chardata"`
}

// Extensions is Custom element from other schemas.
type Extensions struct {
}
